#############################################################################################
#############################################################################################
#cell,process,localization,poliferation,adhesion,cellular,migration
#############################################################################################
df_mat_18 <- subset(df_mat_df, df_mat_df$cluster == 18)
df_mat_18_subset <- ego_mat[which( ego_mat$ID%in% df_mat_18$id),]
dim(df_mat_18_subset)
head(df_mat_18_subset)
df_mat_18_subset_genes <-unlist(strsplit(df_mat_18_subset$geneID, split = "/"))
length(df_mat_18_subset_genes)
length(unique(df_mat_18_subset_genes))
head(df_mat_18_subset_genes)
##Expression
df_mat_18_subset_genes_expression <- intersect(unique(df_mat_18_subset_genes),unique(gene_symbol_mat))
length(unique(df_mat_18_subset_genes_expression))
DataExpressioncsv_18_subset_genes_cibled <- subset(datafull_join,datafull_join$SYMBOL %in% unique(df_mat_18_subset_genes_expression) )
dim(unique(DataExpressioncsv_18_subset_genes_cibled))
#############################################################################################
#############################################################################################
#regulation,organization,assembly
#############################################################################################
df_mat_19 <- subset(df_mat_df, df_mat_df$cluster == 19)
df_mat_19_subset <- ego_mat[which( ego_mat$ID%in% df_mat_19$id),]
dim(df_mat_19_subset)
head(df_mat_19_subset)
df_mat_19_subset_genes <-unlist(strsplit(df_mat_19_subset$geneID, split = "/"))
length(df_mat_19_subset_genes)
length(unique(df_mat_19_subset_genes))
head(df_mat_19_subset_genes)
##Expression
df_mat_19_subset_genes_expression <- intersect(unique(df_mat_19_subset_genes),unique(gene_symbol_mat))
length(unique(df_mat_19_subset_genes_expression))
DataExpressioncsv_19_subset_genes_cibled <- subset(datafull_join,datafull_join$SYMBOL %in% unique(df_mat_19_subset_genes_expression) )
dim(unique(DataExpressioncsv_19_subset_genes_cibled))
#############################################################################################
#############################################################################################
#regulation,cell,positive
#############################################################################################
df_mat_20 <- subset(df_mat_df, df_mat_df$cluster == 20)
df_mat_20_subset <- ego_mat[which( ego_mat$ID%in% df_mat_20$id),]
dim(df_mat_20_subset)
head(df_mat_20_subset)
df_mat_20_subset_genes <-unlist(strsplit(df_mat_20_subset$geneID, split = "/"))
length(df_mat_20_subset_genes)
length(unique(df_mat_20_subset_genes))
head(df_mat_20_subset_genes)
##Expression
df_mat_20_subset_genes_expression <- intersect(unique(df_mat_20_subset_genes),unique(gene_symbol_mat))
length(unique(df_mat_20_subset_genes_expression))
DataExpressioncsv_20_subset_genes_cibled <- subset(datafull_join,datafull_join$SYMBOL %in% unique(df_mat_20_subset_genes_expression) )
dim(unique(DataExpressioncsv_20_subset_genes_cibled))
library(GOxploreR)
# Retrieve the level of a GO biological process term
#regulation
goterms0 <- unique(c(df_mat_4_subset$ID,df_mat_6_subset$ID,df_mat_7_subset$ID,df_mat_13_subset$ID,df_mat_15_subset$ID,df_mat_16_subset$ID,
df_mat_17_subset$ID,df_mat_18_subset$ID))
goterms <- unique(c(df_mat_4_subset$ID,df_mat_6_subset$ID,df_mat_7_subset$ID,df_mat_13_subset$ID,df_mat_15_subset$ID,
df_mat_17_subset$ID,df_mat_19_subset$ID))
df_mat_Regu_subset <- rbind(df_mat_4_subset,df_mat_6_subset,df_mat_7_subset,df_mat_13_subset,df_mat_15_subset,
df_mat_17_subset,df_mat_19_subset)
#####################################################
length(unique(df_mat_Regu_subset$ID))
df_mat_Regu_gene_subset <- unlist(strsplit(df_mat_Regu_subset$geneID, split = "/"))
length(df_mat_Regu_gene_subset)
length(unique(df_mat_Regu_gene_subset))
length(unique(goterms))
df_mat_Regu_subset_genes <-unlist(strsplit(df_mat_Regu_subset$geneID, split = "/"))
length(df_mat_Regu_subset_genes)
length(unique(df_mat_Regu_subset_genes))
head(df_mat_Regu_subset_genes)
#other
goterms <- unique(unique(df_mat_Regu_subset$ID))
length(goterms)
GOTermBPOnLevel_reg <- GOTermBPOnLevel(goterm = goterms)
GOTermBPOnLevel_reg <- GOTermBPOnLevel(goterm = goterms)
save.image("C:/Users/hp/Desktop/ltbiTranscrp/ltbiTranscrp.Rproj.RData")
unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL)
unique(GENENAME_genes_enrichDGN_LTBi)
load("C:/Users/hp/Desktop/ltbiTranscrp/ltbiTranscrp.Rproj.RData")
################
###end of the plot
# View some of the values
#################################################enrichDGN_TB_pulmo
head(enrichDGN_TB_pulmo)
Entrez_genes_enrichDGN_TB_pulmo <- unlist(strsplit(enrichDGN_TB_pulmo$geneID, split = "/"))
unique(Entrez_genes_enrichDGN_TB_pulmo)
GENENAME_genes_enrichDGN_TB_pulmo <-  AnnotationDbi::select(hgu133plus2.db,
keys = unique(Entrez_genes_enrichDGN_TB_pulmo),#unique(df_mat_Regu_subset_overlap_genes)
columns = c("SYMBOL", "GENENAME","ENSEMBL","ENTREZID"),
keytype = "ENTREZID")
unique(GENENAME_genes_enrichDGN_TB_pulmo)
unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL)
####################################################ltbi
head(enrichDGN_LTBi)
Entrez_genes_enrichDGN_LTBi <- unlist(strsplit(enrichDGN_LTBi$geneID, split = "/"))
unique(Entrez_genes_enrichDGN_LTBi)
GENENAME_genes_enrichDGN_LTBi <-  AnnotationDbi::select(hgu133plus2.db,
keys = unique(Entrez_genes_enrichDGN_LTBi),#unique(df_mat_Regu_subset_overlap_genes)
columns = c("SYMBOL", "GENENAME","ENSEMBL","ENTREZID"),
keytype = "ENTREZID")
unique(GENENAME_genes_enrichDGN_LTBi)
unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL)
toy = list(genetodisease_TBi= data_reg_gene2disease_TBi$gene_symbol,enrichment_LTBi = GENENAME_genes_enrichDGN_LTBi$SYMBOL, enrichment_Pulmonary_TB = GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL)
toy = Venn(toy)
overlap(toy)
#####Draw the Venn Diagram
ggvenn(toy, slice = c(1, 2,3))
####3
library(systemPipeR)
list_LTBi <- list(genetodisease_TBi= data_reg_gene2disease_TBi$gene_symbol,enrichment_LTBi = GENENAME_genes_enrichDGN_LTBi$SYMBOL, enrichment_Pulmonary_TB = GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL)
## 2-way Venn diagram
Results <- overLapper(list_LTBi[1:3], type="vennsets")
vennPlot(Results)
list_LTBi <- list(genetodisease_TBi= unique(data_reg_gene2disease_TBi$gene_symbol),enrichment_LTBi = unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL), enrichment_Pulmonary_TB = unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL))
## 2-way Venn diagram
Results <- overLapper(list_LTBi[1:3], type="vennsets")
vennPlot(Results)
Results
View(Results)
Results@vennlist[["enrichment_LTBi"]]
GENENAME_genes_enrichDGN_LTBi_43 <-  subset(Results@vennlist[["enrichment_LTBi"]] %in% unique(GENENAME_genes_enrichDGN_LTBi) )
GENENAME_genes_enrichDGN_LTBi
GENENAME_genes_enrichDGN_LTBi_43 <-  subset(Results@vennlist[["enrichment_LTBi"]] %in% GENENAME_genes_enrichDGN_LTBi )
GENENAME_genes_enrichDGN_LTBi_43 <-  subset(GENENAME_genes_enrichDGN_LTBi %in% Results@vennlist[["enrichment_LTBi"]] )
Results@vennlist[["enrichment_LTBi"]]
GENENAME_genes_enrichDGN_LTBi_43 <-  subset(GENENAME_genes_enrichDGN_LTBi$SYMBOL %in% Results@vennlist[["enrichment_LTBi"]] )
GENENAME_genes_enrichDGN_LTBi_43 <-  intersect(GENENAME_genes_enrichDGN_LTBi$SYMBOL,Results@vennlist[["enrichment_LTBi"]])
GENENAME_genes_enrichDGN_LTBi_43
GENENAME_genes_enrichDGN_LTBi_43 <-  intersect(GENENAME_genes_enrichDGN_LTBi$SYMBOL,Results@vennlist[["enrichment_LTBi"]])
unique(GENENAME_genes_enrichDGN_LTBi_43)
unique(GENENAME_genes_enrichDGN_LTBi_43$SYMBOL)
unique(GENENAME_genes_enrichDGN_LTBi_43)
GENENAME_genes_enrichDGN_LTBi_43
GENENAME_genes_enrichDGN_LTBi_43 <-  intersect(GENENAME_genes_enrichDGN_LTBi,Results@vennlist[["enrichment_LTBi"]])
unique(GENENAME_genes_enrichDGN_LTBi_43)
View(ego_mat)
GENENAME_genes_enrichDGN_LTBi_43 <-GENENAME_genes_enrichDGN_LTBi[which( GENENAME_genes_enrichDGN_LTBi$SYMBOL%in% Results@vennlist[["enrichment_LTBi"]]),]
unique(GENENAME_genes_enrichDGN_LTBi_43)
unique(GENENAME_genes_enrichDGN_LTBi_43$SYMBOL)
GENENAME_genes_enrichDGN_LTBi_43 <-GENENAME_genes_enrichDGN_LTBi[which( GENENAME_genes_enrichDGN_LTBi$SYMBOL%in% Results@vennlist[["enrichment_LTBi"]]),]
unique(GENENAME_genes_enrichDGN_LTBi_43)
unique(GENENAME_genes_enrichDGN_LTBi_43$SYMBOL)
write.csv(GENENAME_genes_enrichDGN_LTBi_43, file = 'C:/Users/hp/Desktop/ltbiTranscrp/GENENAME_genes_enrichDGN_LTBi_43.csv', row.names = FALSE)
library(readr)
selection_seuil_0_0001_norm1 <- read_csv("selection_seuil_0_0001_norm1.csv")
selection_seuil_0_0001_norm1 <-  selection_seuil_0_0001_norm1[order(selection_seuil_0_0001_norm1$FreqRow, decreasing = TRUE), ]
View(selection_seuil_0_0001_norm1)
View(datafull_join_getHpa1b)
library(MiRSEA)
library(miRNApath)
library("hpar")
## ----getHpa-------------------------------------------------------------------
id <- toydd$ENSEMBL
example4
toydd<-  AnnotationDbi::select(hgu133plus2.db,keys = unique(list_LTBi_mirna_set2$target_symbol),columns = c("SYMBOL", "ENTREZID"),keytype = "SYMBOL")
library(hgu133a.db)
library(hgu133plus2.db)
library(hgu133plus2cdf)
library(pd.hg.u133.plus.2)
toydd<-  AnnotationDbi::select(hgu133plus2.db,keys = unique(list_LTBi_mirna_set2$target_symbol),columns = c("SYMBOL", "ENTREZID"),keytype = "SYMBOL")
library("hpar")
list_LTBi_mirna_set2 <-df_fin[which( df_fin$target_symbol%in% geneltbis),]
toydd<-  AnnotationDbi::select(hgu133plus2.db,keys = unique(list_LTBi_mirna_set2$target_symbol),columns = c("SYMBOL", "ENTREZID"),keytype = "SYMBOL")
list_LTBi_mirna_set2 <-df_fin[which( df_fin$target_symbol%in% geneltbis),]
library(dplyr)
list_LTBi_mirna_set2 <-df_fin[which( df_fin$target_symbol%in% geneltbis),]
list_LTBi_mirna <- list(miRNA_genes = unique(df_fin$target_symbol), genetodisease_TBi= unique(data_reg_gene2disease_TBi$gene_symbol),enrichment_LTBi = unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL), enrichment_Pulmonary_TB = unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL),enrichDGN_TB_active = unique(GENENAME_genes_enrichDGN_TB_active$SYMBOL))
## 2-way Venn diagram
Results <- overLapper(list_LTBi_mirna[1:5], type="vennsets")
vennPlot(Results)
p1 <- overLapper(list_LTBi[1:2], type="vennsets")
vennPlot(p1)
p2 <- overLapper(list_LTBi[c(1,3)], type="vennsets")
vennPlot(p2)
geneltbis <- p2@vennlist[["miRNA_genes_enrichment_LTBi"]]
unique(geneltbis)
p3 <- overLapper(list_LTBi[c(1,4)], type="vennsets")
vennPlot(p3)
p4 <- overLapper(list_LTBi[c(1,5)], type="vennsets")
vennPlot(p4)
list_LTBi_mirna_set2 <-df_fin[which( df_fin$target_symbol%in% geneltbis),]
length(unique(list_LTBi_mirna_set2$target_symbol))
length(unique(list_LTBi_mirna_set2$mature_mirna_id))
toydd<-  AnnotationDbi::select(hgu133plus2.db,keys = unique(list_LTBi_mirna_set2$target_symbol),columns = c("SYMBOL", "ENTREZID"),keytype = "SYMBOL")
toydd
library("hpar")
## ----getHpa-------------------------------------------------------------------
id <- toydd$ENSEMBL
#Normal tissue data: Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays.
getHpa1 <- getHpa(id, hpadata = "hpaNormalTissue")
getHpa11 <-getHpa1[which( getHpa1$Tissue%in% "lung"),]
library("dplyr")
colnames(getHpa11)[2] <- "SYMBOL"
library(readxl)
tissuesDB <- read_excel("tissuesDB.xlsx")
datafull_join_getHpa11 <- dplyr::full_join(getHpa11[,c("Gene","SYMBOL","Tissue","Cell.type","Level","Reliability")],
tissuesDB[,c("SYMBOL","TissuesScore")], by='SYMBOL')
library("dplyr")
datafull_join_getHpa11 |>
filter(Reliability == "Approved",
Level == "High") |>
arrange(desc("TissuesScore")) |>
head()
datafull_join_getHpa11 <- dplyr::full_join(getHpa11[,c("Gene","SYMBOL","Tissue","Cell.type","Level","Reliability")],
tissuesDB[,c("SYMBOL","TissuesScore")], by='SYMBOL')
datafull_join_getHpa11 <- dplyr::full_join(getHpa11[,c("Gene","SYMBOL","Tissue","Cell.type","Level","Reliability")],
tissuesDB[,c("SYMBOL","TissuesScore_Lung","TissuesScore_ImuneSystem","TissuesScore_Blood")], by='SYMBOL')
library("dplyr")
datafull_join_getHpa11 |>
filter(Reliability == "Approved",
Level == "High") |>
arrange(desc("TissuesScore")) |>
head()
datafull_join_getHpa11
getHpa11
#Normal tissue data: Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays.
getHpa1 <- getHpa(id, hpadata = "hpaNormalTissue")
getHpa11 <-getHpa1[which( getHpa1$Tissue%in% "lung"),]
getHpa11
getHpa1
id
toydd<-  AnnotationDbi::select(hgu133plus2.db,keys = unique(list_LTBi_mirna_set2$target_symbol),columns = c("SYMBOL", "ENTREZID"),keytype = "SYMBOL")
library("hpar")
## ----getHpa-------------------------------------------------------------------
id <- toydd$ENSEMBL
id
unique(list_LTBi_mirna_set2$target_symbol)
toydd <-AnnotationDbi::select(hgu133plus2.db,keys = unique(list_LTBi_mirna_set2$target_symbol),columns = c("SYMBOL", "ENTREZID"),keytype = "SYMBOL")
toydd
## ----getHpa-------------------------------------------------------------------
id <- toydd$ENSEMBL
#Normal tissue data: Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays.
getHpa1 <- getHpa(id, hpadata = "hpaNormalTissue")
getHpa11 <-getHpa1[which( getHpa1$Tissue%in% "lung"),]
library("dplyr")
colnames(getHpa11)[2] <- "SYMBOL"
library(readxl)
tissuesDB <- read_excel("tissuesDB.xlsx")
datafull_join_getHpa11 <- dplyr::full_join(getHpa11[,c("Gene","SYMBOL","Tissue","Cell.type","Level","Reliability")],
tissuesDB[,c("SYMBOL","TissuesScore_Lung","TissuesScore_ImuneSystem","TissuesScore_Blood")], by='SYMBOL')
library("dplyr")
datafull_join_getHpa11 |>
filter(Reliability == "Approved",
Level == "High") |>
arrange(desc("TissuesScore")) |>
head()
datafull_join_getHpa11
getHpa11
getHpa1
library("hpar")
#Normal tissue data: Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays.
getHpa1 <- getHpa(id, hpadata = "hpaNormalTissue")
getHpa11 <-getHpa1[which( getHpa1$Tissue%in% "lung"),]
library("dplyr")
colnames(getHpa11)[2] <- "SYMBOL"
getHpa11
getHpa1
hpa_data <- allHparData()
hpa_data
#Normal tissue data: Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays.
getHpa1 <- getHpa(id, hpadata = "hpaNormalTissue")
getHpa1
View(getHpa11)
View(getHpa1)
View(getHpa1)
## ----env, echo=FALSE----------------------------------------------------------
suppressPackageStartupMessages(library("BiocStyle"))
suppressPackageStartupMessages(library("org.Hs.eg.db"))
suppressPackageStartupMessages(library("GO.db"))
## ----load---------------------------------------------------------------------
library("hpar")
## ----hpaData------------------------------------------------------------------
data(hpaNormalTissue)
dim(hpaNormalTissue)
names(hpaNormalTissue)
## Number of genes
length(unique(hpaNormalTissue$Gene))
## Number of cell types
length(unique(hpaNormalTissue$Cell.type))
head(levels(hpaNormalTissue$Cell.type))
## Number of tissues
length(unique(hpaNormalTissue$Tissue))
head(levels(hpaNormalTissue$Tissue))
## ----getHpa-------------------------------------------------------------------
id <- toydd$ENSEMBL
#Normal tissue data: Expression profiles for proteins in human tissues based on immunohistochemisty using tissue micro arrays.
getHpa1 <- getHpa(id, hpadata = "hpaNormalTissue")
getHpa11 <-getHpa1[which( getHpa1$Tissue%in% "lung"),]
getHpa11
save.image("C:/Users/hp/Desktop/ltbiTranscrp/ltbiTranscrp.Rproj.RData")
df_mat_19_subset$Description
###################################################################################################################
#####################################################################################################################
######################################################################################################################
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(GOSemSim)
library(DOSE)
treeplot(ego2, showCategory = 30)
# use `hilight = FALSE` to remove ggtree::geom_hilight() layer.
treeplot(ego2, showCategory = 30, hilight = FALSE)
# use `offset` parameter to adjust the distance of bar and tree.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset = 8)
# use `offset_tiplab` parameter to adjust the distance of nodes and branches.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset_tiplab = 0.3)
keep <- rownames(ego2@termsim)[c(1:10, 16:20)]
keep
treeplot(ego2, showCategory = keep)
treeplot(ego2, showCategory = 20,
group_color = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442"))
########################################################
p2 <- treeplot(ego2, hclust_method = "average")
emapplot_cluster(ego2,showCategory = 200)
library(simplifyEnrichment)
set.seed(888)
ggplot2::ggplot(Results, aes(x=word, y=frequency, fill=word)) + geom_bar(width = 0.75,  stat = "identity", colour = "black", size = 1) + coord_polar(theta = "x") + xlab("") + ylab("") + ggtitle("Word Frequency") + theme(legend.position = "none") + labs(x = NULL, y = NULL)
plotly::ggplotly(ggplot2::ggplot(Results, aes(x=word, y=frequency, fill=word)) + geom_bar(width = 0.75, stat = "identity", colour = "black", size = 1) +
xlab("") + ylab("") + ggtitle("Word Frequency") + theme(legend.position = "none") + labs(x = NULL, y = NULL) + theme(plot.subtitle = element_text(vjust = 1), plot.caption = element_text(vjust = 1), axis.text.x = element_text(angle = 90)) + theme(panel.background = element_rect(fill = "honeydew1"), plot.backgrond = element_rect(fill = "antiquewhite")))%>% config(displaylogo = F) %>% config(showLink = F)
GOTermBPOnLevel_reg_4
visRsubDAGBP_reg
visRsubDAGBP_reg <- visRsubDAGBP(goterm = goterms, organism = "Human")
visRsubDAGBP_reg
treeplot(ego2, showCategory = 30)
# use `hilight = FALSE` to remove ggtree::geom_hilight() layer.
treeplot(ego2, showCategory = 30, hilight = FALSE)
# use `offset` parameter to adjust the distance of bar and tree.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset = 8)
# use `offset_tiplab` parameter to adjust the distance of nodes and branches.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset_tiplab = 0.3)
keep <- rownames(ego2@termsim)[c(1:10, 16:20)]
keep
treeplot(ego2, showCategory = keep)
treeplot(ego2, showCategory = 20,
group_color = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442"))
mieaa_enrich
#remotes::install_github("moosa-r/rbioapi")
library("rbioapi")
mirs <- row.names(example4.counts)
mieaa_all
rba_mieaa_enrich_results <- rba_mieaa_enrich_results("5c9a78b0-6157-41e3-9057-0cbba4da08ac")
rba_mieaa_enrich_results
mieaa_enrich
mieaa_enrich <- rba_mieaa_enrich(test_set = mieaa_all$`miRNAs/precursors`,
mirna_type = "mature",
test_type = "GSEA",
species = 9606,
categories = "miRPathDB_GO_Biological_process_mature")
mieaa_enrich
mieaa_enrich
GO_Annotations_mature_mieaa_enrich <- rba_mieaa_enrich(test_set = mirs,
mirna_type = "mature",
test_type = "ORA",
species = 9606,
categories = "MNDR_mature")
GO_Annotations_mature_mieaa_enrich
miRPathDB_GO_Biological_process_mature
View
GO_Annotations_mature_mieaa_enrich
View(GO_Annotations_mature_mieaa_enrich)
View(list_LTBi_mirna)
View(list_LTBi_mirna)
list_LTBi_mirna
View(miRNAs)
View(miRNAs)
mirna.score2.counts
list_LTBi_mirna <- list(miRNA_genes = unique(df_fin$target_symbol), genetodisease_TBi= unique(data_reg_gene2disease_TBi$gene_symbol),enrichment_LTBi = unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL), enrichment_Pulmonary_TB = unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL),enrichDGN_TB_active = unique(GENENAME_genes_enrichDGN_TB_active$SYMBOL))
## 2-way Venn diagram
Results <- overLapper(list_LTBi_mirna[1:5], type="vennsets")
vennPlot(Results)
library("writexl")
capture.output(Results@vennlist, file = "C:/Users/hp/Desktop/Results.txt")
head(example4.counts)
overlap_pairs(toy, slice = 1:4)
#####Draw the Venn Diagram
ggvenn(toy, slice = c(1, 2,4))
toy = Venn(toy)
overlap(toy)
unite(toy)
overlap(toy, c("lit", "EGEOD54992", "EGEOD41055", "EGEOD27984"))
overlap_pairs(toy, slice = 1:4)
list_LTBi_mirna <- list(miRNA_genes = unique(df_fin$target_symbol), genetodisease_TBi= unique(data_reg_gene2disease_TBi$gene_symbol),enrichment_LTBi = unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL), enrichment_Pulmonary_TB = unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL),enrichDGN_TB_active = unique(GENENAME_genes_enrichDGN_TB_active$SYMBOL))
## 2-way Venn diagram
Results <- overLapper(list_LTBi_mirna[1:5], type="vennsets")
vennPlot(Results)
library("writexl")
capture.output(Results@vennlist, file = "C:/Users/hp/Desktop/Results.txt")
#list_LTBi_mirna <- list(genetodisease_TBi= unique(data_reg_gene2disease_TBi$gene_symbol),enrichment_LTBi = unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL), enrichment_Pulmonary_TB = unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL),enrichDGN_TB_active = unique(GENENAME_genes_enrichDGN_TB_active$SYMBOL))
list_LTBi_mirna <- list(miRNA_genes = unique(df_fin$target_symbol),
TBi_genes= unique(data_reg_gene2disease_TBi$gene_symbol),
LTBi_genes = unique(GENENAME_genes_enrichDGN_LTBi$SYMBOL),
TB_genes = unique(GENENAME_genes_enrichDGN_TB_pulmo$SYMBOL),
TB_active_genes = unique(GENENAME_genes_enrichDGN_TB_active$SYMBOL))
## 2-way Venn diagram
Results <- overLapper(list_LTBi_mirna[1:5], type="vennsets")
vennPlot(Results)
unique(df_fin$target_symbol)
length(unique(df_fin$target_symbol))
#NO
#######################################################################################################3
#YES
dgn <- enrichDGN(unique(toy_ensembl$ENTREZID))
head(dgn)
View(dgn@result)
barplot(enrichDGN_LTBi_plot, showCategory=40)
treeplot(ego2, showCategory = 30)
# use `hilight = FALSE` to remove ggtree::geom_hilight() layer.
treeplot(ego2, showCategory = 30, hilight = FALSE)
###################################################################################################################
#####################################################################################################################
######################################################################################################################
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
library(GOSemSim)
library(DOSE)
gene <- unique(c(lit_entrezid$ENTREZID, anno_subset_.54992$ENTREZID,anno_subset_41055$ENTREZID, anno_subset_59184$ENTREZID))
gene_symbol_mat <- unique(c(lit_entrezid$SYMBOL, anno_subset_54992$SYMBOL,anno_subset_41055$SYMBOL, anno_subset_59184$SYMBOL))
ego <- enrichGO(gene  = gene,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
readable      = TRUE)
ego_trans <- enrichGO(gene  =  unique(c( anno_subset_54992$ENTREZID,anno_subset_41055$ENTREZID, anno_subset_59184$ENTREZID)),
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
readable      = TRUE)
ego_lit <- enrichGO(gene  = lit_entrezid$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
readable      = TRUE)
DT::datatable(as.data.frame(ego@result[["Description"]]), options = list(scrollX = TRUE))
DT::datatable(as.data.frame(ego@result), options = list(scrollX = TRUE))
d <- godata('org.Hs.eg.db', ont=c("BP", "CC", "MF"))
ego2 <- pairwise_termsim(ego, method = "Wang", semData = d)
ego2_trans <- pairwise_termsim(ego_trans, method = "Wang", semData = d)
ego2_lit <- pairwise_termsim(ego_lit, method = "Wang", semData = d)
DT::datatable(as.data.frame(ego2@result[["Description"]]), options = list(scrollX = TRUE))
treeplot(ego2, showCategory = 30)
# use `hilight = FALSE` to remove ggtree::geom_hilight() layer.
treeplot(ego2, showCategory = 30, hilight = FALSE)
# use `offset` parameter to adjust the distance of bar and tree.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset = 8)
# use `offset_tiplab` parameter to adjust the distance of nodes and branches.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset_tiplab = 0.3)
keep <- rownames(ego2@termsim)[c(1:10, 16:20)]
keep
treeplot(ego2, showCategory = keep)
treeplot(ego2, showCategory = 20,
group_color = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442"))
########################################################
p2 <- treeplot(ego2, hclust_method = "average")
emapplot_cluster(ego2,showCategory = 200)
library(simplifyEnrichment)
GO_Annotations_mature_mieaa_enrich
treeplot(ego2, showCategory = 30)
# use `hilight = FALSE` to remove ggtree::geom_hilight() layer.
treeplot(ego2, showCategory = 30, hilight = FALSE)
# use `offset` parameter to adjust the distance of bar and tree.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset = 8)
# use `offset_tiplab` parameter to adjust the distance of nodes and branches.
treeplot(ego2, showCategory = 30, hilight = FALSE, offset_tiplab = 0.3)
keep <- rownames(ego2@termsim)[c(1:10, 16:20)]
keep
treeplot(ego2, showCategory = keep)
treeplot(ego2, showCategory = 20,
group_color = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442"))
########################################################
p2 <- treeplot(ego2, hclust_method = "average")
emapplot_cluster(ego2,showCategory = 200)
visRsubDAGBP_reg
#https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html
##############plot
#https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html
enrichDGN_LTBi_plot <- dplyr::filter(dgn, grepl("Tuberculosis", dgn@result$Description, ignore.case = TRUE))
##plot1
library(enrichplot)
barplot(enrichDGN_LTBi_plot, showCategory=40)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
#mutate(enrichDGN_LTBi_plot, qscore = -log(p.adjust, base=10)) %>% barplot(x="qscore")
## convert gene ID to Symbol
##plot2
edox <- setReadable(enrichDGN_LTBi_plot, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(edox)
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(edox, categorySize="pvalue")
p3 <- cnetplot(edox, circular = TRUE, colorEdge = TRUE)
cowplot::plot_grid(p1, p2, p3, ncol=3, labels=LETTERS[1:3], rel_widths=c(.8, .8, 1.2))
p11
###plot5
edox2 <- pairwise_termsim(edox)
p1_1 <- treeplot(edox2)
p2_2 <- treeplot(edox2, hclust_method = "average")
aplot::plot_list(p1_1, p2_2, tag_levels='A')
################
###end of the plot
# View some of the values
#################################################enrichDGN_TB_pulmo
head(enrichDGN_TB_pulmo)
#https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html
##############plot
#https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html
enrichDGN_LTBi_plot <- dplyr::filter(dgn, grepl("Tuberculosis", dgn@result$Description, ignore.case = TRUE))
#mutate(enrichDGN_LTBi_plot, qscore = -log(p.adjust, base=10)) %>% barplot(x="qscore")
## convert gene ID to Symbol
##plot2
edox <- setReadable(enrichDGN_LTBi_plot, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(edox)
p1
